# generated by datamodel-codegen:
#   filename:  bottlenecks.json
#   timestamp: 2020-10-17T14:41:09+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel


class Capacities(BaseModel):
    nominal: int
    operational: int


class Structure(BaseModel):
    name: str
    capacities: Capacities
    amount_assets: int


class RoadReceive(BaseModel):
    structure: Structure


class Barns(BaseModel):
    name: str
    capacity: float
    util_load: float
    setup_time: float
    amount_assets: int


class RailroadExpedition(BaseModel):
    barns: Barns


class Classification(BaseModel):
    time_dolly: float
    load_dolly: int


class TerminalItem(BaseModel):
    id: str
    name: str
    road_receive: RoadReceive
    railroad_expedition: RailroadExpedition
    classification: Classification
    category: str


class ExpeditionCapacity(BaseModel):
    capacity: int
    amount_assets: int


class OperationalCapacity(BaseModel):
    terminal_time: int
    amount_wagons: int
    load_wagon: int


class ThirdTerminalItem(BaseModel):
    id: str
    name: str
    expedition_capacity: ExpeditionCapacity
    operational_capacity: OperationalCapacity
    category: str


class Exchange(BaseModel):
    category: str
    another_bands: float
    nominal_bands: int


class MillHopperItem(BaseModel):
    id: str
    name: str
    capacity: int
    setup_time: float
    commitment: int
    category: str


class RailroadReceive(BaseModel):
    mill_hopper: List[MillHopperItem]


class Cradle(BaseModel):
    id: str
    name: str
    mooring_time: float
    unberthing_time: float
    setup_time: int
    vessel_max_load: int
    capacity: float
    category: str


class ShipmentExpedition(BaseModel):
    cradles: List[Cradle]


class PortItem(BaseModel):
    id: str
    name: str
    exchange: Exchange
    railroad_receive: RailroadReceive
    shipment_expedition: ShipmentExpedition


class WagonsCycleItem(BaseModel):
    origin: str
    origin_name: str
    destiny: str
    destiny_name: str
    cycle_days: float


class Fleet(BaseModel):
    id: str
    name: str
    category: str
    wagons_cycle: List[WagonsCycleItem]


class Assets(BaseModel):
    fleets: List[Fleet]


class Bottleneck(BaseModel):
    terminal: List[TerminalItem]
    third_terminal: List[ThirdTerminalItem]
    port: List[PortItem]
    assets: Assets


class Model(BaseModel):
    init_date: int
    end_date: int
    bottleneck: Bottleneck
    id: str
    name: str
    simulation_code: int
